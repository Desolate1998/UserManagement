// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserManagement.Backend.Infrastructure.DataContext;

#nullable disable

namespace UserManagement.Backend.Infrastructure.Migrations
{
    [DbContext(typeof(ManagementContext))]
    [Migration("20240501145449_initial1")]
    partial class initial1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UserManagement.Backend.Domain.Database.Group", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("GroupCode");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Code")
                        .HasName("pk_Group_Code");

                    b.ToTable("Groups", (string)null);
                });

            modelBuilder.Entity("UserManagement.Backend.Domain.Database.GroupPermission", b =>
                {
                    b.Property<string>("GroupCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("GroupCode");

                    b.Property<string>("PermissionCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("PermissionCode");

                    b.HasKey("GroupCode", "PermissionCode");

                    b.HasIndex("PermissionCode");

                    b.ToTable("GroupPermission", (string)null);
                });

            modelBuilder.Entity("UserManagement.Backend.Domain.Database.LoginStatusLookup", b =>
                {
                    b.Property<string>("StatusCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("StatusCode");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.HasKey("StatusCode")
                        .HasName("StatusCode");

                    b.ToTable("LoginStatusLookup", (string)null);
                });

            modelBuilder.Entity("UserManagement.Backend.Domain.Database.Permission", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("PermissionCode");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.HasKey("Code");

                    b.ToTable("Permissions", (string)null);
                });

            modelBuilder.Entity("UserManagement.Backend.Domain.Database.User", b =>
                {
                    b.Property<long>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("EntryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EntryId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LastName");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("PasswordSalt");

                    b.HasKey("EntryId")
                        .HasName("pk_User_Entry_Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("idx_Users_Email");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("UserManagement.Backend.Domain.Database.UserGroup", b =>
                {
                    b.Property<string>("GroupCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("GroupCode");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("UserId");

                    b.HasKey("GroupCode", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroups", (string)null);
                });

            modelBuilder.Entity("UserManagement.Backend.Domain.Database.UserLoginHistory", b =>
                {
                    b.Property<long>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("EntryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EntryId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Ip");

                    b.Property<string>("LoginStatus")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("StatusCode");

                    b.Property<string>("StatusLookupStatusCode")
                        .HasColumnType("nvarchar(3)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("UserId");

                    b.HasKey("EntryId");

                    b.HasIndex("StatusLookupStatusCode");

                    b.HasIndex("UserId");

                    b.ToTable("UserLoginHistory", (string)null);
                });

            modelBuilder.Entity("UserManagement.Backend.Domain.Database.GroupPermission", b =>
                {
                    b.HasOne("UserManagement.Backend.Domain.Database.Group", "Group")
                        .WithMany("GroupPermissions")
                        .HasForeignKey("GroupCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GroupPermission_Groups_GroupsCode");

                    b.HasOne("UserManagement.Backend.Domain.Database.Permission", "Permission")
                        .WithMany("GroupPermissions")
                        .HasForeignKey("PermissionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GroupPermission_Permissions_PermissionsCode");

                    b.Navigation("Group");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("UserManagement.Backend.Domain.Database.UserGroup", b =>
                {
                    b.HasOne("UserManagement.Backend.Domain.Database.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GroupUser_Groups_GroupsCode");

                    b.HasOne("UserManagement.Backend.Domain.Database.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GroupUser_Users_UsersEntryId");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserManagement.Backend.Domain.Database.UserLoginHistory", b =>
                {
                    b.HasOne("UserManagement.Backend.Domain.Database.LoginStatusLookup", "StatusLookup")
                        .WithMany("UserLoginHistory")
                        .HasForeignKey("StatusLookupStatusCode")
                        .HasConstraintName("FK_UserLoginHistory_Status_StatusLookup");

                    b.HasOne("UserManagement.Backend.Domain.Database.User", "User")
                        .WithMany("UserLoginHistory")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserLogin_Users_UsersEntryId");

                    b.Navigation("StatusLookup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserManagement.Backend.Domain.Database.Group", b =>
                {
                    b.Navigation("GroupPermissions");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("UserManagement.Backend.Domain.Database.LoginStatusLookup", b =>
                {
                    b.Navigation("UserLoginHistory");
                });

            modelBuilder.Entity("UserManagement.Backend.Domain.Database.Permission", b =>
                {
                    b.Navigation("GroupPermissions");
                });

            modelBuilder.Entity("UserManagement.Backend.Domain.Database.User", b =>
                {
                    b.Navigation("UserGroups");

                    b.Navigation("UserLoginHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
